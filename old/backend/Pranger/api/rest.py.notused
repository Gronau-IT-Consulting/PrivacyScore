#-*- coding: utf-8 -*-
from flask import Flask, request
from flask_restful import reqparse, abort, Api, Resource
from flask_cors import CORS, cross_origin
import json
import bson
from bson.json_util import dumps
from data_access.connector import DBConnector

app = Flask(__name__)
api = Api(app)
CORS(app)

connector = DBConnector()
parser = reqparse.RequestParser()
parser.add_argument('listid')
parser.add_argument('token')
parser.add_argument('listname')
parser.add_argument('description')
parser.add_argument('tags', type=list, action='append', location='json')
parser.add_argument('columns', type=list, action='append', location='json')
parser.add_argument('sites', type=list, location='json')

class SaveList(Resource):
    def post(self):
        try:
            args = parser.parse_args()
            listname = args['listname']
            description = args['description']
            tags = request.json['tags']
            columns = request.json['columns']
            obj = dumps(connector.SaveList(listname, description, tags, columns, True))
            return obj, 201
        except Exception as ex:
            return '{"type":"error", "message":"request is wrong"}'

class UpdateList(Resource):
    def post(self):
        try:
            args = parser.parse_args()
            token = args['token']
            listname = args['listname']
            description = args['description']
            tags = request.json['tags']
            columns = request.json['columns']
            connector.UpdateList(token, listname, description, tags, columns, True)
            return '{"type":"success", "message":"ok"}'
        except Exception as ex:
            print "Error in UpdateList:" 
            print ex
            return '{"type":"error", "message":"other error"}'

class ScanList(Resource):
    def post(self):
        try:
            args = parser.parse_args()
            listid = args['listid']
            connector.ScanList(listid)
            return '{"type":"success", "message":"ok"}', 200
        except Exception as ex:
            return '{"type":"error", "message":"other error"}'


class ShowList(Resource):
    def get(self, token):
        try:
            List = dumps(connector.ShowList(token))
            return List
        except bson.errors.InvalidId as invalid:
            return '{"type":"error", "message":"invalid object id"}'
        except Exception as ex:
            return '{"type":"error", "message":"other error"}'

class ShowLists(Resource):
    def get(self):
        try:
            Lists = dumps(connector.ShowLists())
            return Lists
        except Exception as ex:
            return '{"type":"error", "message":"other error"}'

class ShowScannedList(Resource):
    def get(self, list_id, scan_group_id):
        try:
            List = dumps(connector.ShowScannedList(list_id, scan_group_id))
            return List
        except Exception as ex:
            print ex
            return '{"type":"error", "message":"other error"}'

class SaveSite(Resource):
    def post(self):
        try:
            args = parser.parse_args()
            listid = args['listid']
            sites = args['sites']
            connector.SaveSites(sites, listid)
            return '{"type":"success", "message":"ok"}'
        except Exception as ex:
            print "Error in SaveSite:"
            print ex
            return '{"type":"error", "message":"request is wrong"}'

class ShowScan(Resource):
    def get(self, site_id, scan_id):
        try:
            Scan = dumps(connector.ShowScan(site_id, scan_id))
            return Scan
        except Exception as ex:
            return '{"type":"error", "message":"other error"}'

class GetScanGroupsBySite(Resource):
    def get(self, site_id):
        try:
            scangroups = dumps(connector.GetScanGroupsBySite(site_id))
            return scangroups
        except Exception as ex:
            return '{"type":"error", "message":"other error"}'

class GetScanGroupsByList(Resource):
    def get(self, list_id):
        try:
            scangroups = dumps(connector.GetScanGroupsByList(list_id))
            return scangroups
        except Exception as ex:
            return '{"type":"error", "message":"other error"}'

class GetScanDates(Resource):
    def get(self, site_id):
        try:
            scandates = dumps(connector.GetScanDates(site_id))
            return scandates
        except Exception as ex:
            return '{"type":"error", "message":"other error"}'

class GetListID(Resource):
    def get(self, token):
        try:
            list_id = connector.GetListId(token)
            return list_id
        except Exception as ex:
            return '{"type":"error", "message":"other error"}'

class GetToken(Resource):
    def get(self, list_id):
        try:
            token = dumps(connector.GetToken(list_id))
            return token
        except Exception as ex:
            return '{"type":"error", "message":"other error"}'

api.add_resource(SaveList, '/SaveList')
api.add_resource(SaveSite, '/SaveSite')
api.add_resource(UpdateList, '/UpdateList')

api.add_resource(ScanList, '/ScanList')

api.add_resource(ShowList, '/ShowList/<token>')
api.add_resource(ShowLists, '/ShowLists')
api.add_resource(ShowScan, '/ShowScan/<site_id>/<scan_id>')
api.add_resource(GetScanGroupsBySite, '/GetScanGroupsBySite/<site_id>')
api.add_resource(GetScanGroupsByList, '/GetScanGroupsByList/<list_id>')
api.add_resource(GetScanDates, '/GetScanDates/<site_id>')
api.add_resource(ShowScannedList, '/ShowScannedList/<list_id>/<scan_group_id>')

api.add_resource(GetListID, '/GetListID/<token>')
api.add_resource(GetToken, '/GetToken/<list_id>')
