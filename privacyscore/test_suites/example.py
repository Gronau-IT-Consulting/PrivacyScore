"""
This is an example test module. Its purpose is to document the interface
which is used for all tests.

Each test module has to define a test function and as process function. The
docstrings below explain their purpose.
"""
import json
from typing import Dict, List, Tuple

from privacyscore.utils import get_raw_data_by_identifier


def test(url: str, previous_results: dict) -> List[Tuple[Dict[str, str], bytes]]:
    """
    The task of the test function is to scan the site and collect the raw
    data required in order produce a test result. It is **not** its task to
    process this data; it should just collect the data generated by the tools
    it uses, i.e. JSON results of subprocesses, the source code of the website
    or similar.

    It always gets the following positional arguments:
    * The url. This is the url of the site which should be tested.
    * A dictionary containing the *processed* results of all tests from
      previous test stages. If there have not been any tests yielding results
      in a previous stage, the dictionary is empty.

    In addition, a test function can get arbitrary parameters. The values
    for those parameters can then be specified in the settings where the test
    module is configured. Those parameters are static for all sites; the common
    use case is to run a test multiple times in different modes, i.e. testssl
    for web and for email ports, or to supply additional information like a
    path to an external script or a basedir for temporary data.

    The data collected by the test function should be returned as a list of
    tuples where the first element of the tuple is a dictionary containing the
    following information:
    * The data_type specifying the mime type of the supplied raw data object.
    * An identifier for the data object. It can be an arbitrary string.
      The only designated use of it is for the process function of the same
      test module to identify raw data.
    The second element of the tuple is the bytes-encoded raw data object.
    """

    # An example for a return value of the test function.
    return [({
        'data_type': 'application/json',
        'identifier': 'jsonresult',
    }, b'{"foo":42}'), ({
        'data_type': 'text/plain',
        'identifier': 'example',
    }, b'an example raw data')]


def process(raw_data: list, previous_results: dict):
    """
    The task of the process function is to evaluate the raw data collected
    by the test function.

    It gets the raw data as first positional argument and the previous result
    dict, which is the same as supplied to the test function, as second argument.
    Additionally, all arbitrary parameters supplied to the test function are
    supplied to the process function as well.

    It should return a dictionary containing the relevant test results. The
    result dictionary is structured in groups (each of them being another
    dictionary) which contain key-value entries. The value of those keys may
    be any json-serializable content.
    The result dictionary is merged group-wise with the result dictionaries of
    all other tests. Therefore, keys should be globally unique; especially a
    test which runs in multiple modes should make sure to use different keys
    in different modes, for example a prefix based on the time (i.e. mx or a).
    """

    # Examples to retrieve raw data objects.
    json_data = json.loads(
        get_raw_data_by_identifier(raw_data, 'jsonresult').decode())
    image = get_raw_data_by_identifier(raw_data, 'screenshot')
    database = get_raw_data_by_identifier(raw_data, 'database')

    # An example for a return value of the process function.
    return {
        'general': {
            'is_interesting': False,
        },
        'privacy': {
            'respects_privacy': True,
        },
        'ssl': {
            'pfs': False,
            'has_hsts_header': True,
            'has_hsts_preload_header': False,
            'has_hpkp_header': False,
        },
    }
