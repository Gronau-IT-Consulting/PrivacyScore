- hosts: dbs
  vars_files:
    - vars/main.yml
  roles:
    - role: geerlingguy.postgresql
      become: yes
- hosts: rabbitmq-servers
  become: true
  become_method: sudo
  vars:
    rabbitmq_version: 3.6

  tasks:
  - name: install package
    apt: name={{ item }} update_cache=yes state=installed
    with_items:
      - rabbitmq-server

  - name: enable rabbitmq plugins
    rabbitmq_plugin: names=rabbitmq_management,rabbitmq_tracing,rabbitmq_federation state=enabled
    notify:
    - restart rabbitmq

  - name: add users
    rabbitmq_user: user={{item}} password=privacyscore tags=administrator,{{item}} vhost=/ configure_priv=.* write_priv=.* read_priv=.* state=present
    with_items:
    - privacyscore

  - name: remove default guest user
    rabbitmq_user: user=guest state=absent

  - name: ensure vhost /test is present
    rabbitmq_vhost: name=/test state=present

  handlers:
  - name: restart rabbitmq
    service: name=rabbitmq-server state=restarted

- hosts: redis
  become: true
  become_method: sudo
  tasks:
  - name: install package redis
    apt: name={{ item }} update_cache=yes state=installed
    with_items:
      - redis-server
  - name: Enable nginx Service
    service:
      name: redis-server
      state: started
      enabled: yes
  - name: Bind Redis to 0.0.0.0
    lineinfile:
      path: /etc/redis/redis.conf
      regexp: '^bind'
      line: 'bind 0.0.0.0'
    notify:
      - restart redis-server
  handlers:
  - name: restart redis-server
    service: name=redis-server state=restarted
- hosts: privacyscore
  become: true
  become_user: root
  vars:
    ansible_ssh_pipelining: yes
    apt_file: /etc/apt/sources.list.d/google-chrome.list
  tasks:
    - name: Install apt packages
      apt: 
        name: "{{ packages }}"
      vars:
        packages:
          - build-essential
          - git
          - libboost-python-dev
          - libffi-dev
          - libjpeg-dev
          - libleveldb1v5  # v5 on stretch
          - libleveldb-dev
          - libpq-dev
          - libre2-dev
          - libssl-dev
          - libxml2-dev
          - libxslt-dev
          - ntp
          - python3
          - python3-dev
          - python3-six
          - python-dev
          - sudo
          - virtualenv
          - xvfb
          - python-setuptools
    - name: Does the Google apt file exist?
      command: test -f {{apt_file}}
      register: google_apt_exists
      ignore_errors: True
    - name: Add Google Chrome key
      shell: wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
      when: google_apt_exists.rc == 1
    - name: Add Google Chrome repo
      copy: content="deb http://dl.google.com/linux/chrome/deb/ stable main" dest={{apt_file}} owner=root group=root mode=644
      when: google_apt_exists.rc == 1
    - name: Update apt cache
      apt: update_cache=yes
      when: google_apt_exists.rc == 1
    - name: Install Google Chrome
      apt: pkg=google-chrome-stable state=present
    - name: Enable NTP service
      service:
        name: ntp
        state: started
        enabled: yes
    - name: Create root .ssh directory
      file:
        path: /root/.ssh
        owner: root
        group: root
        mode: 0700
        state: directory
    - name: Store ssh key for root
      copy:
        src: id_rsa
        dest: /root/.ssh/id_rsa
        owner: root
        group: root
        mode: 0400
    - name: Clone privacyscore git repository
      git:
        repo: https://github.com/Gronau-IT-Consulting/PrivacyScore.git
        dest: /opt/privacyscore
        version: Teamevent-Tallinnn
        accept_hostkey: yes
    - name: Create privacyscore user
      user:
        name: privacyscore
        home: /opt/privacyscore
        shell: /bin/bash
        system: yes
    - name: Set owner of privacyscore directory
      file:
        path: /opt/privacyscore
        owner: privacyscore
        group: privacyscore
        recurse: yes
    - name: Prepare privacyscore user
      become: yes
      become_user: privacyscore
      args:
        creates: /opt/privacyscore/.bashrc
      shell: |
        set -e

        cd /opt/privacyscore

        virtualenv --python $(which python3) .pyenv

        cp /etc/skel/.bashrc .
        echo ". /opt/privacyscore/.pyenv/bin/activate" >> .bashrc
        ln -sf .bashrc .bash_profile

        . /opt/privacyscore/.pyenv/bin/activate

        pip install six
        pip install -r requirements.txt
        pip install typing

        ./install-tests.sh
    - name: Place settings
      template:
        src: templates/settings.py
        dest: /opt/privacyscore/privacyscore/settings.py
        owner: privacyscore
        group: privacyscore
        mode: 0500
    - name: Place systemd unit file for privacyscore-celery-master
      template:
        src: templates/privacyscore-celery-master.service
        dest: /etc/systemd/system/privacyscore-celery-master.service
    - name: Enable and start celery master service
      service:
        name: privacyscore-celery-master
        state: started
        enabled: yes
    - name: Create privacyscore .ssh directory
      file:
        path: /opt/privacyscore/.ssh
        owner: privacyscore
        group: privacyscore
        mode: 0700
        state: directory
    - name: Store ssh key for privacyscore
      copy:
        src: id_rsa
        dest: /opt/privacyscore/.ssh/id_rsa
        owner: privacyscore
        group: privacyscore
        mode: 0400
    - name: Pull git repository as privacyscore user to accept hostkey initially
      become: yes
      become_user: privacyscore
      git:
        repo: https://github.com/Gronau-IT-Consulting/PrivacyScore.git
        dest: /opt/privacyscore
        version: Teamevent-Tallinnn
        accept_hostkey: yes
    - name: Create Directory for static files
      become: yes
      file:
        path: /var/www/privacyscore.org
        state: directory
        mode: 0755
        owner: privacyscore
    - name: Install nginx
      apt:
        name: nginx
    - name: Create nginx configuration
      template:
        src: templates/nginx.conf
        dest: /etc/nginx/sites-enabled/privacyscore.conf
      notify:
        - restart nginx
    - name: Enable nginx Service
      service:
        name: nginx
        state: started
        enabled: yes
    - name: Refresh PrivacyScore git repository
      become: yes
      become_user: privacyscore
      git:
        repo: https://github.com/Gronau-IT-Consulting/PrivacyScore.git
        dest: /opt/privacyscore
        version: Teamevent-Tallinnn
    - name: Update settings
      blockinfile:
        path: /opt/privacyscore/privacyscore/settings.py
        block: |
          LOGIN_REDIRECT_URL = '/'
          LOGOUT_REDIRECT_URL = '/'

          from kombu import Exchange, Queue
          CELERY_TIMEZONE = TIME_ZONE
          CELERY_TASK_SERIALIZER = 'msgpack'
          CELERY_RESULT_SERIALIZER = 'msgpack'
          CELERY_ACCEPT_CONTENT = ['msgpack']
          CELERY_BROKER_URL = 'amqp://privacyscore:privacyscore@ps-gronau-it-rabbitmq.local:5672//'
          CELERY_RESULT_BACKEND = 'redis://ps-gronau-it-redis.local:6379/0'
          CELERY_DEFAULT_QUEUE = 'master'
          CELERY_QUEUES = (
              Queue('master', Exchange('master'), routing_key='master'),
              Queue('slave', Exchange('slave'), routing_key='slave'),
          )


          from datetime import timedelta
          SCAN_REQUIRED_TIME_BEFORE_NEXT_SCAN = timedelta(minutes=28)
          SCAN_SUITE_TIMEOUT_SECONDS = 420
          SCAN_TOTAL_TIMEOUT = timedelta(hours=2)
          SCAN_TEST_BASEPATH = os.path.join(BASE_DIR, 'tests')
          SCAN_LISTS_PER_PAGE = 30

          # The base modules containing the test suites. You usually do not want to
          # change this.
          TEST_SUITES_BASEMODULES = [
              'privacyscore.test_suites',
          ]

          # The list of the test names to use. Test names may not be used multiple times.
          # See the example test suite for documentation of the test module interface.
          SCAN_TEST_SUITES = [
              ('network', {
                  'country_database_path': os.path.join(
                      SCAN_TEST_BASEPATH, 'vendor/geoip/GeoLite2-Country.mmdb'),
              }),
              ('openwpm', {
                  'scan_basedir': '/tmp/openwpm-scans',
                  'virtualenv_path': os.path.join(BASE_DIR, 'tests/vendor/OpenWPM/.pyenv'),
              }),
              ('serverleak', {}),
              ('testssl_https', {}),
              ('testssl_mx', {
                {% if testssl_mx_remote_host %}
                'remote_host': '{{ testssl_mx_remote_host }}',
                {% endif %}
              }),
          ]

          RAW_DATA_UNCOMPRESSED_TYPES = [
              'image/png',
              'image/jpeg',
          ]
          RAW_DATA_DB_MAX_SIZE = 4000
          RAW_DATA_DIR = os.path.join(BASE_DIR, 'raw_data')
          RAW_DATA_DELETE_AFTER = timedelta(days=30)

          SCAN_SCHEDULE_DAEMON_SLEEP = 60

          SCAN_LISTS_PER_PAGE = 30

          INSTALLED_APPS.append('raven.contrib.django.raven_compat')

    - name: Install PrivacyScore pip requirements
      become: yes
      become_user: privacyscore
      pip:
        requirements: /opt/privacyscore/requirements.txt
        virtualenv: /opt/privacyscore/.pyenv
    - name: Install raven
      become: yes
      become_user: privacyscore
      pip:
        name: raven
        virtualenv: /opt/privacyscore/.pyenv
    - name: Refresh privacyscanner git repository
      become: yes
      become_user: privacyscore
      git:
        repo: https://github.com/Gronau-IT-Consulting/privacyscanner.git
        dest: /opt/privacyscore/privacyscanner
        version: master
    - name: Install privacyscanner pip requirements
      become: yes
      become_user: privacyscore
      pip:
        name: /opt/privacyscore/privacyscanner
        virtualenv: /opt/privacyscore/.pyenv
    - name: Update privacyscanner dependencies
      become: yes
      become_user: privacyscore
      command: privacyscanner update_dependencies
      environment:
        PATH: /opt/privacyscore/.pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        VIRTUAL_ENV: /opt/privacyscore/.pyenv
    - name: Migrate database
      when: is_master
      become: yes
      become_user: privacyscore
      command: /opt/privacyscore/manage.py migrate
      environment:
        PATH: /opt/privacyscore/.pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        VIRTUAL_ENV: /opt/privacyscore/.pyenv
    - name: Collect static files
      when: is_master
      become: yes
      become_user: privacyscore
      command: /opt/privacyscore/manage.py collectstatic --no-input
      environment:
        PATH: /opt/privacyscore/.pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        VIRTUAL_ENV: /opt/privacyscore/.pyenv
    - name: Place systemd unit file for privacyscore-celery-master
      when: is_master
      template:
        src: privacyscore-celery-master.service
        dest: /etc/systemd/system/privacyscore-celery-master.service
    - name: Place systemd unit file for privacyscore-celery-slave
      when: is_slave
      template:
        src: privacyscore-celery-slave.service
        dest: /etc/systemd/system/privacyscore-celery-slave.service
    - name: Place systemd unit file for privacyscore
      when: is_master
      template:
        src: privacyscore.service
        dest: /etc/systemd/system/privacyscore.service
    - name: Restart privacyscore.service
      when: is_master
      service: name=privacyscore state=restarted
    - name: Restart privacyscore-celery-master.service
      when: is_master
      service: name=privacyscore-celery-master state=restarted
    - name: Restart privacyscore-celery-slave.service
      when: is_slave
      service: name=privacyscore-celery-slave state=restarted
    - name: Refresh vendor/testssl
      when: is_slave
      become: yes
      become_user: privacyscore
      git:
        repo: https://github.com/drwetter/testssl.sh.git
        dest: /opt/privacyscore/tests/vendor/testssl.sh
        version: 47409a32d687355739543890c1ddc70a8539d071
    - name: Create vendor/HSTSPreload if it does not exist
      file:
        path: /opt/privacyscore/tests/vendor/HSTSPreload/
        owner: privacyscore
        group: privacyscore
        mode: 0700
        state: directory
    - name: Download HSTS Preload lists
      shell: wget https://chromium.googlesource.com/chromium/src/net/+/master/http/transport_security_state_static.json?format=TEXT -O - | base64 -d | egrep -v "^([ ]*\/\/|$)" > "/opt/privacyscore/tests/vendor/HSTSPreload/transport_security_state_static"
      args:
        executable: /bin/bash  
  handlers:
    - name: restart nginx
      service: name=nginx state=restarted


    
